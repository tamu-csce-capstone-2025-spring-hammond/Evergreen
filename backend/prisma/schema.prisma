generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id       Int         @id @default(autoincrement())
  email         String      @unique @db.VarChar(255)
  password_hash String
  user_name     String      @db.VarChar(100)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  portfolio     Portfolio[]
  watchlist     Watchlist[]

  @@map("users")
}

model Portfolio {
  portfolio_id       Int                 @id @default(autoincrement())
  user_id            Int
  portfolio_name     String              @db.VarChar(255)
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  target_date        DateTime            @db.Date
  color              String              @db.VarChar(7)
  uninvested_cash    Decimal             @default(0) @db.Decimal(16, 6)
  total_deposited    Decimal             @default(0) @db.Decimal(16, 6)
  risk_aptitude      Int?                @db.SmallInt
  bitcoin_focus      Boolean             @default(false)
  smallcap_focus     Boolean             @default(false)
  value_focus        Boolean             @default(false)
  momentum_focus     Boolean             @default(false)
  holdings           Holdings[]
  users              Users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  portfolio_snapshot PortfolioSnapshot[]
  trades             ExecutedTrades[]

  @@map("portfolio")
}

model ExecutedTrades {
  trade_id             Int       @id @default(autoincrement())
  portfolio_id         Int
  ticker               String    @db.VarChar(10)
  trade_time           DateTime  @default(now()) @db.Timestamp(6)
  trade_is_buy         Boolean
  amount_shares_traded Decimal   @db.Decimal(10, 4)
  av_price_paid        Decimal   @db.Decimal(15, 6)
  portfolio            Portfolio @relation(fields: [portfolio_id], references: [portfolio_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("executed_trades")
}

model Holdings {
  portfolio_id       Int
  ticker             String    @db.VarChar(10)
  ticker_name        String    @db.VarChar(255)
  quantity           Decimal   @db.Decimal(15, 6)
  average_cost_basis Decimal   @db.Decimal(15, 6)
  last_updated       DateTime  @db.Timestamp(6)
  portfolio          Portfolio @relation(fields: [portfolio_id], references: [portfolio_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([portfolio_id, ticker])
  @@map("holdings")
}

model PortfolioSnapshot {
  portfolio_id   Int
  snapshot_time  DateTime  @db.Timestamp(6)
  snapshot_value Decimal   @db.Decimal(10, 2)
  portfolio      Portfolio @relation(fields: [portfolio_id], references: [portfolio_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([portfolio_id, snapshot_time])
  @@map("portfolio_snapshot")
}

model PortfolioTemplate {
  portfolio_template_id             Int                                @id @default(autoincrement())
  last_generated                    DateTime                           @default(now()) @db.Timestamp(6)
  sample_portfolio_name             String?                            @db.VarChar(255)
  years_to_expiration               Int
  risk_aptitude                     Int?                               @db.SmallInt
  bitcoin_focus                     Boolean                            @default(false)
  smallcap_focus                    Boolean                            @default(false)
  value_focus                       Boolean                            @default(false)
  momentum_focus                    Boolean                            @default(false)
  sample_portfolio_asset_allocation PortfolioTemplateAssetAllocation[]

  @@map("portfolio_template")
}

model PortfolioTemplateAssetAllocation {
  portfolio_template_id Int
  ticker                String            @db.VarChar(10)
  percentage            Decimal           @db.Decimal(10, 6)
  sample_portfolio      PortfolioTemplate @relation(fields: [portfolio_template_id], references: [portfolio_template_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ticker, portfolio_template_id])
  @@map("portfolio_templte_asset_allocation")
}

model Watchlist {
  user_id     Int
  ticker      String @db.VarChar(10)
  ticker_name String @db.VarChar(255)
  users       Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([ticker, user_id])
  @@map("watchlist")
}

model TradeQ {
  trade_q_id             Int      @id @default(autoincrement())
  portfolio_id           Int
  ticker                 String   @db.VarChar(10)
  time_added_to_q        DateTime @default(now())
  trade_is_buy           Boolean
  dollar_amount_to_trade Decimal  @db.Decimal(10, 4)

  @@map("trade_q")
}
